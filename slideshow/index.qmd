---
title: "Quarto Presentations"
subtitle: "Create beautiful interactive slide decks with Reveal.js"
format:
  revealjs: 
    slide-number: true
    chalkboard: 
      buttons: false
    preview-links: auto
    logo: images/quarto.png
    css: styles.css
    footer: '[https://quarto.org](https://quarto.org)'
resources:
  - demo.pdf
---

## Hello, There

This presentation will show you examples of what you can do with Quarto and [Reveal.js](https://revealjs.com), including:

-   Presenting code and LaTeX equations
-   Including computations in slide output
-   Image, video, and iframe backgrounds
-   Fancy transitions and animations
-   Activating scroll view

...and much more

## Pretty Code {auto-animate="true"}

-   Over 20 syntax highlighting themes available
-   Default theme optimized for accessibility

```python
import streamlit as st

def main():
    # Create a title for the app
    st.title("Simple Streamlit App")
    
    # Add a text input
    user_input = st.text_input("Enter your name")
    
    # Display the input
    if user_input:
        st.write(f"Hello, {user_input}!")
```

::: footer
Learn more: [Syntax Highlighting](https://quarto.org/docs/output-formats/html-code.html#highlighting)
:::

## Code Animations {auto-animate="true"}

-   Over 20 syntax highlighting themes available
-   Default theme optimized for accessibility

```python
import streamlit as st
import pandas as pd
import plotly.express as px

def main():
    # Create a title for the app
    st.title("Simple Streamlit App")
    
    # Add a text input
    user_input = st.text_input("Enter your name")
    
    # Create a sample dataframe
    df = pd.DataFrame({
        'Month': ['Jan', 'Feb', 'Mar', 'Apr'],
        'Sales': [100, 120, 150, 140]
    })
    
    # Create a plot
    fig = px.line(df, x='Month', y='Sales', title='Monthly Sales')
    st.plotly_chart(fig)

if __name__ == "__main__":
    main()
```

::: footer
Learn more: [Code Animations](https://quarto.org/docs/presentations/revealjs/advanced.html#code-animations)
:::

## Line Highlighting

-   Highlight specific lines for emphasis
-   Incrementally highlight additional lines

``` {.python code-line-numbers="4-5|7|10"}
import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(subplot_kw={'projection': 'polar'})
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```

::: footer
Learn more: [Line Highlighting](https://quarto.org/docs/presentations/revealjs/#line-highlighting)
:::

## Executable Code

```{python}
#| output-location: slide
#| echo: true
#| fig-width: 10
#| fig-height: 4.5
import seaborn as sns
import matplotlib.pyplot as plt

# Load the dataset
tips = sns.load_dataset("tips")

# Create the scatter plot
sns.scatterplot(data=tips, x="total_bill", y="tip", hue="time")
plt.title("Tips vs Total Bill")
plt.show()
```


## Interactive Plotting with Plotly

```{python}
#| echo: true
import plotly.express as px
import pandas as pd

# Load the dataset
df = px.data.gapminder().query("year == 2007")

# Create an interactive scatter plot
fig = px.scatter(df, x="gdpPercap", y="lifeExp", 
                 size="pop", color="continent",
                 hover_name="country", log_x=True,
                 size_max=60)
fig.show()
```

## Advanced Matplotlib Visualization

```{python}
#| echo: true
import numpy as np
import matplotlib.pyplot as plt

# Generate data
x = np.linspace(0, 10, 100)
y1 = np.sin(x)
y2 = np.cos(x)

# Create the plot

print(plt.style.available)
plt.style.use('seaborn-v0_8')
fig, ax = plt.subplots(figsize=(10, 6))

ax.plot(x, y1, label='Sin(x)', color='blue', linewidth=2)
ax.plot(x, y2, label='Cos(x)', color='red', linewidth=2)
ax.fill_between(x, y1, y2, alpha=0.2)

ax.set_title('Trigonometric Functions')
ax.set_xlabel('x')
ax.set_ylabel('y')
ax.legend()
ax.grid(True)

plt.show()
```

## LaTeX Equations

[MathJax](https://www.mathjax.org/) rendering of equations to HTML

::: columns
::: {.column width="40%"}
``` tex
\begin{gather*}
a_1=b_1+c_1\\
a_2=b_2+c_2-d_2+e_2
\end{gather*}

\begin{align}
a_{11}& =b_{11}&
  a_{12}& =b_{12}\\
a_{21}& =b_{21}&
  a_{22}& =b_{22}+c_{22}
\end{align}
```
:::

::: {.column width="60%"}
```{=tex}
\begin{gather*}
a_1=b_1+c_1\\
a_2=b_2+c_2-d_2+e_2
\end{gather*}
```
```{=tex}
\begin{align}
a_{11}& =b_{11}&
  a_{12}& =b_{12}\\
a_{21}& =b_{21}&
  a_{22}& =b_{22}+c_{22}
\end{align}
```
:::
:::

## Column Layout {.smaller}

Arrange content into columns of varying widths:

::: columns
::: {.column width="35%"}
#### Penguins Dataset Analysis

The Palmer Penguins dataset contains size measurements for three penguin species observed on three islands in the Palmer Archipelago, Antarctica.
:::

::: {.column width="3%"}
:::

::: {.column width="62%"}
```{python}
import pandas as pd
import seaborn as sns

# Load the penguins dataset
penguins = sns.load_dataset("penguins")
penguins.head().to_markdown()
```
:::
:::

## Incremental Lists

Lists can optionally be displayed incrementally:

::: incremental
-   First item
-   Second item
-   Third item
:::

. . .

<br/> Insert pauses to make other types of content display incrementally.

## Data Visualization with Seaborn {.smaller}

```{python}
#| echo: true
import seaborn as sns
import matplotlib.pyplot as plt

plt.style.use('seaborn-v0_8')

# Create a figure with subplots
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))

# Plot 1: Violin plot
sns.violinplot(data=penguins, x="species", y="body_mass_g", ax=ax1)
ax1.set_title("Body Mass Distribution by Species")

# Plot 2: Box plot
sns.boxplot(data=penguins, x="species", y="flipper_length_mm", ax=ax2)
ax2.set_title("Flipper Length Distribution by Species")

plt.tight_layout()
plt.show()
```

[Continue with the rest of the original slides, replacing any R-specific content with Python equivalents...]

::: footer
Learn more: [Quarto Presentations](https://quarto.org/docs/presentations/revealjs/)
:::