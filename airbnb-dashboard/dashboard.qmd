---
title: "Rental Reviews"
format: dashboard
echo: false
css: style.css
embed-resources: true
---
```{python}
import pandas as pd
import matplotlib.pyplot as plt
from shiny import render, reactive, ui

import itables
from itables import show, init_notebook_mode
import itables.options as opt

listings = pd.read_csv("listings.csv")
reviews = pd.read_csv("reviews.csv")

COLOR = '#6C757D'
```

# Overview

## Value Boxes
```{python}
#| content: valuebox
#| title: "Number of Listings"
dict(
    icon = "house",
    color = "secondary",
    value = len(listings)
)
```

```{python}
#| content: valuebox
#| title: "Number of Reviews"
dict(
    icon = "person",
    color = "secondary",
    value = len(reviews)
)
```

```{python}
#| content: valuebox
#| title: "Average Rating"
dict(
    icon = "star",
    color = "secondary",
    value = f"{reviews['overall'].mean():.2f}"
)
```

## Trends over time

```{python}
#| title: "Average Rating Over Time"
#| echo: false
averages = reviews.groupby(['year', 'month'])['overall'].mean().reset_index()
plt.figure(figsize=(10, 6))
plt.plot(averages['month'], averages['overall'], linewidth=8, color=COLOR)  # Increase line thickness
```

```{python}
#| title: "Ratings by Type"
ax = reviews['overall'].value_counts().sort_index().plot(kind='bar', color=COLOR)
ax.set_ylabel('Count', fontsize=18)
ax.set_yticklabels(ax.get_yticklabels(), fontsize=16)
ax.set_xlabel(None)
ax.set_xticklabels(ax.get_xticklabels(), rotation=0, fontsize=16)
plt.show();

```

## Map of Listings

```{python}
#| title: "Map of Listings"
import folium

map_center = [listings['latitude'].mean(), listings['longitude'].mean()]
m = folium.Map(
    location=map_center,
    zoom_start=12,
    height=500
)

for idx, row in listings.iterrows():
    tooltip = f"""
    <h5>Name: {row['name']} <br/>
    Rating: {row['review_scores_rating']} <br/>
    Cost: {row['price']}/night </h5>
    """
    
    _ = folium.Marker(
        [row['latitude'], row['longitude']], 
        tooltip=tooltip, 
        icon=folium.Icon(color='gray', icon='plus')
    ).add_to(m)

m
```

# Details

```{python}
#| output: False
opt.classes = ['display', 'cell-border', 'wrap-text']

reviews_joined = reviews.merge(listings, left_on='listing_id', right_on='id')

cols = {
    'name': 'Name', 
    'number_of_reviews': 'Reviews', 
    'review_scores_rating': 'Rating', 
    'review_scores_accuracy': 'Accuracy', 
    'review_scores_cleanliness': 'Cleanliness', 
    'review_scores_checkin': 'Checkin', 
    'review_scores_communication': 'Communication', 
    'review_scores_location': 'Location',  
    'price': 'Price'
}

reviews_joined = reviews_joined.rename(columns=cols)
details = reviews_joined[cols.values()]
listing_details = details.drop_duplicates(subset=['Name']).reset_index(drop=True)

```

## Another Row
```{python}
itables.show(listing_details, maxBytes=0)
```

## Listing Details
```{python}
output_df = reviews_joined[['Name', 'date', 'comments', 'overall']].reset_index(drop=True)
itables.show(output_df)
```